//

// engine.cpp : Put all your graphics stuff in this file. This is kind of the graphics module.
// In here, you should type all your OpenGL commands, and you can also type code to handle
// input platform events (e.g to move the camera or react to certain shortcuts), writing some
// graphics related GUI options, and so on.
//

#include "engine.h"
#include <imgui.h>
#include <stb_image.h>
#include <stb_image_write.h>
#include <assimp/cimport.h>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
#include <vector>

#define BINDING(b) b
#define GLVERSION(major, minor) (major*10 + minor)
#define GLSLVERSION(major, minor) (major*100 + minor*10)


// https://www.khronos.org/opengl/wiki/Debug_Output
void OnGlError(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam)
{
    if (severity == GL_DEBUG_SEVERITY_NOTIFICATION)
        return;

    ELOG("OpenGL debug message: %s", message);

    switch (source)
    {
    case GL_DEBUG_SOURCE_API:             ELOG(" - source: GL_DEBUG_SOURCE_API"); break; // Calls to the OpenGL API
    case GL_DEBUG_SOURCE_WINDOW_SYSTEM:   ELOG(" - source: GL_DEBUG_SOURCE_WINDOW_SYSTEM"); break; // Calls to a window-system API
    case GL_DEBUG_SOURCE_SHADER_COMPILER: ELOG(" - source: GL_DEBUG_SOURCE_SHADER_COMPILER"); break; // A compiler for a shading language
    case GL_DEBUG_SOURCE_THIRD_PARTY:     ELOG(" - source: GL_DEBUG_SOURCE_THIRD_PARTY"); break; // An application associated with OpenGL
    case GL_DEBUG_SOURCE_APPLICATION:     ELOG(" - source: GL_DEBUG_SOURCE_APPLICATION"); break; // Generated by the user of this application
    case GL_DEBUG_SOURCE_OTHER:           ELOG(" - source: GL_DEBUG_SOURCE_OTHER"); break; // Some source that isn't one of these
    }

    switch (type)
    {
    case GL_DEBUG_TYPE_ERROR:               ELOG(" - type: GL_DEBUG_TYPE_ERROR"); break; // An error, typically from the API
    case GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR: ELOG(" - type: GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR"); break; // Some behavior marked deprecated has been used
    case GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR:  ELOG(" - type: GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR"); break; // Something has invoked undefined behavior
    case GL_DEBUG_TYPE_PORTABILITY:         ELOG(" - type: GL_DEBUG_TYPE_PORTABILITY"); break; // Some functionality the user relies upon is not portable
    case GL_DEBUG_TYPE_PERFORMANCE:         ELOG(" - type: GL_DEBUG_TYPE_PERFORMANCE"); break; // Code has triggered possible performance issues
    case GL_DEBUG_TYPE_MARKER:              ELOG(" - type: GL_DEBUG_TYPE_MARKER"); break; // Command stream annotation
    case GL_DEBUG_TYPE_PUSH_GROUP:          ELOG(" - type: GL_DEBUG_TYPE_PUSH_GROUP"); break; // Group pushing
    case GL_DEBUG_TYPE_POP_GROUP:           ELOG(" - type: GL_DEBUG_TYPE_POP_GROUP"); break; // foo
    case GL_DEBUG_TYPE_OTHER:               ELOG(" - type: GL_DEBUG_TYPE_OTHER"); break; // Some type that isn't one of these
    }

    switch (severity)
    {
    case GL_DEBUG_SEVERITY_HIGH:         ELOG(" - severity: GL_DEBUG_SEVERITY_HIGH"); break; // All OpenGL Errors, shader compilation/linking errors, or highly-dangerous undefined behavior
    case GL_DEBUG_SEVERITY_MEDIUM:       ELOG(" - severity: GL_DEBUG_SEVERITY_MEDIUM"); break; // Major performance warnings, shader compilation/linking warnings, or the use of deprecated functionality
    case GL_DEBUG_SEVERITY_LOW:          ELOG(" - severity: GL_DEBUG_SEVERITY_LOW"); break; // Redundant state change performance warning, or unimportant undefined behavior
    case GL_DEBUG_SEVERITY_NOTIFICATION: ELOG(" - severity: GL_DEBUG_SEVERITY_NOTIFICATION"); break; // Anything that isn't an error or performance issue.
    }
}

bool IsPowerOf2(u32 value)
{
    return value && !(value & (value - 1));
}

u32 Align(u32 value, u32 alignment)
{
    return (value + alignment - 1) & ~(alignment - 1);
}

Buffer CreateBuffer(u32 size, GLenum type, GLenum usage)
{
    Buffer buffer = {};
    buffer.size = size;
    buffer.type = type;

    glGenBuffers(1, &buffer.handle);
    glBindBuffer(type, buffer.handle);
    glBufferData(type, buffer.size, NULL, usage);
    glBindBuffer(type, 0);

    return buffer;
}

#define CreateConstantBuffer(size)      CreateBuffer(size, GL_UNIFORM_BUFFER,       GL_STREAM_DRAW)
#define CreateStaticVertexBuffer(size)  CreateBuffer(size, GL_ARRAY_BUFFER,         GL_STATIC_DRAW)
#define CreateStaticIndexBuffer(size)   CreateBuffer(size, GL_ELEMENT_ARRAY_BUFFER, GL_STATIC_DRAW)
#define CreateDynamicVertexBuffer(size) CreateBuffer(size, GL_ARRAY_BUFFER,         GL_STREAM_DRAW)

void BindBuffer(const Buffer& buffer)
{
    if (buffer.handle)
        glBindBuffer(buffer.type, buffer.handle);
}

void MapBuffer(Buffer& buffer, GLenum access)
{
    glBindBuffer(buffer.type, buffer.handle);
    buffer.data = (u8*)glMapBuffer(buffer.type, access);
    buffer.head = 0;
}

void UnmapBuffer(Buffer& buffer)
{
    glUnmapBuffer(buffer.type);
    glBindBuffer(buffer.type, 0);
}

void AlignHead(Buffer& buffer, u32 alignment)
{
    ASSERT(IsPowerOf2(alignment), "The alignment must be a power of 2");
    buffer.head = Align(buffer.head, alignment);
}

void PushAlignedData(Buffer& buffer, const void* data, u32 size, u32 alignment)
{
    ASSERT(buffer.data != NULL, "The buffer must be mapped first");
    AlignHead(buffer, alignment);
    ASSERT(buffer.head + size <= buffer.size, "Trying to push data out of bounds");
    memcpy((u8*)buffer.data + buffer.head, data, size);
    buffer.head += size;
}

#define PushData(buffer, data, size) PushAlignedData(buffer, data, size, 1)
#define PushUInt(buffer, value) { u32 v = value; PushAlignedData(buffer, &v, sizeof(v), 4); }
#define PushVec3(buffer, value) PushAlignedData(buffer, value_ptr(value), sizeof(value), sizeof(vec4))
#define PushVec4(buffer, value) PushAlignedData(buffer, value_ptr(value), sizeof(value), sizeof(vec4))
#define PushMat3(buffer, value) PushAlignedData(buffer, value_ptr(value), sizeof(value), sizeof(vec4))
#define PushMat4(buffer, value) PushAlignedData(buffer, value_ptr(value), sizeof(value), sizeof(vec4))

Buffer& GetCurrentConstantBuffer( App* app )
{
    ASSERT( app->currentConstantBufferIdx <= app->constantBuffers.size(), "Current buffer out of bounds" );
    while ( app->currentConstantBufferIdx >= app->constantBuffers.size() ) {
        app->constantBuffers.push_back( CreateConstantBuffer(app->uniformBufferMaxSize) );
    }
    return app->constantBuffers[ app->currentConstantBufferIdx ];
}

void BeginConstantBufferRecording( App *app )
{
    app->currentConstantBufferIdx = 0;
    Buffer& buffer = GetCurrentConstantBuffer(app);
    MapBuffer( buffer, GL_WRITE_ONLY );
}

Buffer& GetMappedConstantBufferForRange( App *app, u32 sizeInBytes )
{
    Buffer& buffer = GetCurrentConstantBuffer(app);

    AlignHead(buffer, app->uniformBufferAlignment);

    if ( buffer.head + sizeInBytes <= buffer.size )
    {
        return buffer;
    }
    else
    {
        UnmapBuffer(buffer);
        ASSERT( app->currentConstantBufferIdx < app->constantBuffers.size(), "Constant buffer memory is full" );
        app->currentConstantBufferIdx++;
        Buffer& nextBuffer = GetCurrentConstantBuffer(app);
        MapBuffer( nextBuffer, GL_WRITE_ONLY );
        return nextBuffer;
    }
}

void EndConstantBufferRecording( App *app )
{
    Buffer& buffer = app->constantBuffers[app->currentConstantBufferIdx];
    UnmapBuffer(buffer);
}

GLuint CreateProgramFromSource(String programSource, int glslVersion, const char* shaderName)
{
    GLchar  infoLogBuffer[1024] = {};
    GLsizei infoLogBufferSize = sizeof(infoLogBuffer);
    GLsizei infoLogSize;
    GLint   success;

    const char* vertexShaderDefine = "#define VERTEX\n";
    const char* fragmentShaderDefine = "#define FRAGMENT\n";

    char glslVersionHeader[16];
    sprintf(glslVersionHeader, "#version %u\n", glslVersion);

    char glslVersionDefine[32];
    sprintf(glslVersionDefine, "#define VERSION %u\n", glslVersion);

    char shaderNameDefine[128];
    sprintf(shaderNameDefine, "#define %s\n", shaderName);

    const GLchar* vertexShaderSource[] = {
        glslVersionHeader,
        glslVersionDefine,
        shaderNameDefine,
        vertexShaderDefine,
        programSource.str
    };
    const GLint vertexShaderLengths[] = {
        (GLint) strlen(glslVersionHeader),
        (GLint) strlen(glslVersionDefine),
        (GLint) strlen(shaderNameDefine),
        (GLint) strlen(vertexShaderDefine),
        (GLint) programSource.len
    };
    const GLchar* fragmentShaderSource[] = {
        glslVersionHeader,
        glslVersionDefine,
        shaderNameDefine,
        fragmentShaderDefine,
        programSource.str
    };
    const GLint fragmentShaderLengths[] = {
        (GLint) strlen(glslVersionHeader),
        (GLint) strlen(glslVersionDefine),
        (GLint) strlen(shaderNameDefine),
        (GLint) strlen(fragmentShaderDefine),
        (GLint) programSource.len
    };

    GLuint vshader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vshader, ARRAY_COUNT(vertexShaderSource), vertexShaderSource, vertexShaderLengths);
    glCompileShader(vshader);
    glGetShaderiv(vshader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vshader, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glCompileShader() failed with vertex shader %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    GLuint fshader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fshader, ARRAY_COUNT(fragmentShaderSource), fragmentShaderSource, fragmentShaderLengths);
    glCompileShader(fshader);
    glGetShaderiv(fshader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fshader, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glCompileShader() failed with fragment shader %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    GLuint programHandle = glCreateProgram();
    glAttachShader(programHandle, vshader);
    glAttachShader(programHandle, fshader);
    glLinkProgram(programHandle);
    glGetProgramiv(programHandle, GL_LINK_STATUS, &success);
    if (!success)
    {
        glGetProgramInfoLog(programHandle, infoLogBufferSize, &infoLogSize, infoLogBuffer);
        ELOG("glLinkProgram() failed with program %s\nReported message:\n%s\n", shaderName, infoLogBuffer);
    }

    glUseProgram(0);

    glDetachShader(programHandle, vshader);
    glDetachShader(programHandle, fshader);
    glDeleteShader(vshader);
    glDeleteShader(fshader);

#if 0
    // Shader reflection
    ILOG("SHADER REFLECTION FOR %s", shaderName);
    GLint   blockCount;
    GLchar  blockName[128];
    GLsizei blockNameLen;
    GLint   blockSize;
    GLint   blockUniformCount;
    GLint   blockUniformIndices[128];
    GLint   blockUniformOffsets[128];
    GLint   blockUniformCounts[128];
    GLchar  uniformName[128];
    GLsizei uniformNameLen;
    GLint   uniformCount;
    GLenum  uniformType;
    glGetProgramiv(programHandle, GL_ACTIVE_UNIFORM_BLOCKS, &blockCount);
    for (u32 blockIdx = 0; blockIdx < blockCount; ++blockIdx)
    {
        glGetActiveUniformBlockName(programHandle, blockIdx, ARRAY_COUNT(blockName), &blockNameLen, blockName);
        glGetActiveUniformBlockiv(programHandle, blockIdx, GL_UNIFORM_BLOCK_DATA_SIZE, &blockSize);
        ILOG("- Uniform Block: %s (%d Bytes)", blockName, blockSize);

        glGetActiveUniformBlockiv(programHandle, blockIdx, GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS, &blockUniformCount );
        ASSERT(blockUniformCount <= ARRAY_COUNT(blockUniformIndices), "Uniform block exeeds the maximum number of fields");
        glGetActiveUniformBlockiv(programHandle, blockIdx, GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, blockUniformIndices );

        glGetActiveUniformsiv(programHandle, blockUniformCount, (const GLuint*)blockUniformIndices, GL_UNIFORM_OFFSET, blockUniformOffsets);
        glGetActiveUniformsiv(programHandle, blockUniformCount, (const GLuint*)blockUniformIndices, GL_UNIFORM_SIZE, blockUniformCounts);

        for (u32 blockUniformIdx = 0; blockUniformIdx < blockUniformCount; blockUniformIdx++)
        {
            u32 uniformIdx = blockUniformIndices[blockUniformIdx];

            glGetActiveUniform(programHandle, uniformIdx, ARRAY_COUNT(uniformName), &uniformNameLen, &uniformCount, &uniformType, uniformName);
            ILOG("  -> uniform: %s (offset:%d count:%d)", uniformName, blockUniformOffsets[blockUniformIdx], blockUniformCounts[blockUniformIdx]);
        }
    }
#endif

    return programHandle;
}

VertexShaderLayout ExtractVertexShaderLayoutFromProgram(GLuint programHandle)
{
    VertexShaderLayout layout = {};

    GLint attributeCount = 0;
    char attributeName[128];
    GLsizei attributeNameLength;
    GLint attributeSize;
    GLenum attributeType;
    GLint attributeLocation;
    u8 attributeComponentCount = 0;

    glGetProgramiv(programHandle, GL_ACTIVE_ATTRIBUTES, &attributeCount);

    for (i32 i = 0; i < attributeCount; ++i)
    {
        glGetActiveAttrib(programHandle, i,
                          ARRAY_COUNT(attributeName),
                          &attributeNameLength,
                          &attributeSize,
                          &attributeType,
                          attributeName);

        switch (attributeType)
        {
            case GL_FLOAT: attributeComponentCount = 1; break;
            case GL_FLOAT_VEC2: attributeComponentCount = 2; break;
            case GL_FLOAT_VEC3: attributeComponentCount = 3; break;
            case GL_FLOAT_VEC4: attributeComponentCount = 4; break;
            default: INVALID_CODE_PATH("Unsupported attribute type");
        }

        attributeLocation = glGetAttribLocation(programHandle, attributeName);

        layout.attributes.push_back({
            (u8)attributeLocation,
            (u8)attributeComponentCount
            });
    }

    return layout;
}


u32 LoadProgram(App* app, const char* filepath, const char* programName)
{
    String programSource = ReadTextFile(filepath);

    Program program = {};
    program.handle = CreateProgramFromSource(programSource, app->glslVersion, programName);
    program.vertexInputLayout = ExtractVertexShaderLayoutFromProgram(program.handle);
    program.filepath = filepath;
    program.programName = programName;
    program.lastWriteTimestamp = GetFileLastWriteTimestamp(filepath);
    app->programs.push_back(program);

    return app->programs.size() - 1;
}

Image LoadImage(const char* filename)
{
    Image img = {};
    stbi_set_flip_vertically_on_load(true);
    img.pixels = stbi_load(filename, &img.size.x, &img.size.y, &img.nchannels, 0);
    if (img.pixels)
    {
        img.stride = img.size.x * img.nchannels;
    }
    else
    {
        ELOG("Could not open file %s", filename);
    }
    return img;
}

void FreeImage(Image image)
{
    stbi_image_free(image.pixels);
}

GLuint CreateTexture2DFromImage(Image image)
{
    GLenum internalFormat = GL_RGB8;
    GLenum dataFormat     = GL_RGB;
    GLenum dataType       = GL_UNSIGNED_BYTE;

    switch (image.nchannels)
    {
        case 3: dataFormat = GL_RGB; internalFormat = GL_RGB8; break;
        case 4: dataFormat = GL_RGBA; internalFormat = GL_RGBA8; break;
        default: ELOG("LoadTexture2D() - Unsupported number of channels");
    }

    GLuint texHandle;
    glGenTextures(1, &texHandle);
    glBindTexture(GL_TEXTURE_2D, texHandle);
    glTexImage2D(GL_TEXTURE_2D, 0, internalFormat, image.size.x, image.size.y, 0, dataFormat, dataType, image.pixels);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR_MIPMAP_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glGenerateMipmap(GL_TEXTURE_2D);
    glBindTexture(GL_TEXTURE_2D, 0);

    return texHandle;
}

u32 LoadTexture2D(App* app, const char* filepath)
{
    for (u32 texIdx = 0; texIdx < app->textures.size(); ++texIdx)
        if (app->textures[texIdx].filepath == filepath)
            return texIdx;

    Image image = LoadImage(filepath);

    if (image.pixels)
    {
        Texture tex = {};
        tex.handle = CreateTexture2DFromImage(image);
        tex.filepath = filepath;

        u32 texIdx = app->textures.size();
        app->textures.push_back(tex);

        FreeImage(image);
        return texIdx;
    }
    else
    {
        return UINT32_MAX;
    }
}

void ProcessAssimpMesh(const aiScene* scene, aiMesh *mesh, Mesh *myMesh, u32 baseMeshMaterialIndex, std::vector<u32>& submeshMaterialIndices)
{
    std::vector<float> vertices;
    std::vector<u32> indices;

    bool hasTexCoords = false;
    bool hasTangentSpace = false;

    // process vertices
    for(unsigned int i = 0; i < mesh->mNumVertices; i++)
    {
        vertices.push_back(mesh->mVertices[i].x);
        vertices.push_back(mesh->mVertices[i].y);
        vertices.push_back(mesh->mVertices[i].z);
        vertices.push_back(mesh->mNormals[i].x);
        vertices.push_back(mesh->mNormals[i].y);
        vertices.push_back(mesh->mNormals[i].z);

        if(mesh->mTextureCoords[0]) // does the mesh contain texture coordinates?
        {
            hasTexCoords = true;
            vertices.push_back(mesh->mTextureCoords[0][i].x);
            vertices.push_back(mesh->mTextureCoords[0][i].y);
        }

        if(mesh->mTangents != nullptr && mesh->mBitangents)
        {
            hasTangentSpace = true;
            vertices.push_back(mesh->mTangents[i].x);
            vertices.push_back(mesh->mTangents[i].y);
            vertices.push_back(mesh->mTangents[i].z);

            // For some reason ASSIMP gives me the bitangents flipped.
            // Maybe it's my fault, but when I generate my own geometry
            // in other files (see the generation of standard assets)
            // and all the bitangents have the orientation I expect,
            // everything works ok.
            // I think that (even if the documentation says the opposite)
            // it returns a left-handed tangent space matrix.
            // SOLUTION: I invert the components of the bitangent here.
            vertices.push_back(-mesh->mBitangents[i].x);
            vertices.push_back(-mesh->mBitangents[i].y);
            vertices.push_back(-mesh->mBitangents[i].z);
        }
    }

    // process indices
    for(unsigned int i = 0; i < mesh->mNumFaces; i++)
    {
        aiFace face = mesh->mFaces[i];
        for(unsigned int j = 0; j < face.mNumIndices; j++)
        {
            indices.push_back(face.mIndices[j]);
        }
    }

    // store the proper (previously proceessed) material for this mesh
    submeshMaterialIndices.push_back(baseMeshMaterialIndex + mesh->mMaterialIndex);

    // create the vertex format
    VertexBufferLayout vertexBufferLayout = {};
    vertexBufferLayout.attributes.push_back( VertexBufferAttribute{ 0, 3, 0 } );
    vertexBufferLayout.attributes.push_back( VertexBufferAttribute{ 1, 3, 3*sizeof(float) } );
    vertexBufferLayout.stride = 6 * sizeof(float);
    if (hasTexCoords)
    {
        vertexBufferLayout.attributes.push_back( VertexBufferAttribute{ 2, 2, vertexBufferLayout.stride } );
        vertexBufferLayout.stride += 2 * sizeof(float);
    }
    if (hasTangentSpace)
    {
        vertexBufferLayout.attributes.push_back( VertexBufferAttribute{ 3, 3, vertexBufferLayout.stride } );
        vertexBufferLayout.stride += 3 * sizeof(float);

        vertexBufferLayout.attributes.push_back( VertexBufferAttribute{ 4, 3, vertexBufferLayout.stride } );
        vertexBufferLayout.stride += 3 * sizeof(float);
    }

    // add the submesh into the mesh
    Submesh submesh = {};
    submesh.vertexBufferLayout = vertexBufferLayout;
    submesh.vertices.swap(vertices);
    submesh.indices.swap(indices);
    myMesh->submeshes.push_back( submesh );
}

void ProcessAssimpMaterial(App* app, aiMaterial *material, Material& myMaterial, String directory)
{
    aiString name;
    aiColor3D diffuseColor;
    aiColor3D emissiveColor;
    aiColor3D specularColor;
    ai_real shininess;
    material->Get(AI_MATKEY_NAME, name);
    material->Get(AI_MATKEY_COLOR_DIFFUSE, diffuseColor);
    material->Get(AI_MATKEY_COLOR_EMISSIVE, emissiveColor);
    material->Get(AI_MATKEY_COLOR_SPECULAR, specularColor);
    material->Get(AI_MATKEY_SHININESS, shininess);

    myMaterial.name = name.C_Str();
    myMaterial.albedo = vec3(diffuseColor.r, diffuseColor.g, diffuseColor.b);
    myMaterial.emissive = vec3(emissiveColor.r, emissiveColor.g, emissiveColor.b);
    myMaterial.smoothness = shininess / 256.0f;

    aiString aiFilename;
    if (material->GetTextureCount(aiTextureType_DIFFUSE) > 0)
    {
        material->GetTexture(aiTextureType_DIFFUSE, 0, &aiFilename);
        String filename = MakeString(aiFilename.C_Str());
        String filepath = MakePath(directory, filename);
        myMaterial.albedoTextureIdx = LoadTexture2D(app, filepath.str);
    }
    if (material->GetTextureCount(aiTextureType_EMISSIVE) > 0)
    {
        material->GetTexture(aiTextureType_EMISSIVE, 0, &aiFilename);
        String filename = MakeString(aiFilename.C_Str());
        String filepath = MakePath(directory, filename);
        myMaterial.emissiveTextureIdx = LoadTexture2D(app, filepath.str);
    }
    if (material->GetTextureCount(aiTextureType_SPECULAR) > 0)
    {
        material->GetTexture(aiTextureType_SPECULAR, 0, &aiFilename);
        String filename = MakeString(aiFilename.C_Str());
        String filepath = MakePath(directory, filename);
        myMaterial.specularTextureIdx = LoadTexture2D(app, filepath.str);
    }
    if (material->GetTextureCount(aiTextureType_NORMALS) > 0)
    {
        material->GetTexture(aiTextureType_NORMALS, 0, &aiFilename);
        String filename = MakeString(aiFilename.C_Str());
        String filepath = MakePath(directory, filename);
        myMaterial.normalsTextureIdx = LoadTexture2D(app, filepath.str);
    }
    if (material->GetTextureCount(aiTextureType_HEIGHT) > 0)
    {
        material->GetTexture(aiTextureType_HEIGHT, 0, &aiFilename);
        String filename = MakeString(aiFilename.C_Str());
        String filepath = MakePath(directory, filename);
        myMaterial.bumpTextureIdx = LoadTexture2D(app, filepath.str);
    }

    //myMaterial.createNormalFromBump();
}

void ProcessAssimpNode(const aiScene* scene, aiNode *node, Mesh *myMesh, u32 baseMeshMaterialIndex, std::vector<u32>& submeshMaterialIndices)
{
    // process all the node's meshes (if any)
    for(unsigned int i = 0; i < node->mNumMeshes; i++)
    {
        aiMesh *mesh = scene->mMeshes[node->mMeshes[i]];
        ProcessAssimpMesh(scene, mesh, myMesh, baseMeshMaterialIndex, submeshMaterialIndices);
    }

    // then do the same for each of its children
    for(unsigned int i = 0; i < node->mNumChildren; i++)
    {
        ProcessAssimpNode(scene, node->mChildren[i], myMesh, baseMeshMaterialIndex, submeshMaterialIndices);
    }
}

u32 LoadModel(App* app, const char* filename)
{
    const aiScene* scene = aiImportFile(filename,
                                        aiProcess_Triangulate           |
                                        aiProcess_GenSmoothNormals      |
                                        aiProcess_CalcTangentSpace      |
                                        aiProcess_JoinIdenticalVertices |
                                        aiProcess_PreTransformVertices  |
                                        aiProcess_ImproveCacheLocality  |
                                        aiProcess_OptimizeMeshes        |
                                        aiProcess_SortByPType);

    if (!scene)
    {
        ELOG("Error loading mesh %s: %s", filename, aiGetErrorString());
        return UINT32_MAX;
    }

    app->meshes.push_back(Mesh{});
    Mesh& mesh = app->meshes.back();
    u32 meshIdx = (u32)app->meshes.size() - 1u;

    app->models.push_back(Model{});
    Model& model = app->models.back();
    model.meshIdx = meshIdx;
    u32 modelIdx = (u32)app->models.size() - 1u;

    String directory = GetDirectoryPart(MakeString(filename));

    // Create a list of materials
    u32 baseMeshMaterialIndex = (u32)app->materials.size();
    for (unsigned int i = 0; i < scene->mNumMaterials; ++i)
    {
        app->materials.push_back(Material{});
        Material& material = app->materials.back();
        ProcessAssimpMaterial(app, scene->mMaterials[i], material, directory);
    }

    ProcessAssimpNode(scene, scene->mRootNode, &mesh, baseMeshMaterialIndex, model.materialIdx);

    aiReleaseImport(scene);

    u32 vertexBufferSize = 0;
    u32 indexBufferSize = 0;

    for (u32 i = 0; i < mesh.submeshes.size(); ++i)
    {
        vertexBufferSize += mesh.submeshes[i].vertices.size() * sizeof(float);
        indexBufferSize  += mesh.submeshes[i].indices.size()  * sizeof(u32);
    }

    mesh.vertexBuffer = CreateStaticVertexBuffer(vertexBufferSize);
    mesh.indexBuffer = CreateStaticIndexBuffer(indexBufferSize);

    MapBuffer(mesh.vertexBuffer, GL_WRITE_ONLY);
    MapBuffer(mesh.indexBuffer, GL_WRITE_ONLY);

    for (u32 i = 0; i < mesh.submeshes.size(); ++i)
    {
        mesh.submeshes[i].vertexOffset = mesh.vertexBuffer.head;
        mesh.submeshes[i].indexOffset = mesh.indexBuffer.head;

        const void* verticesData = mesh.submeshes[i].vertices.data();
        const u32   verticesSize = mesh.submeshes[i].vertices.size() * sizeof(float);
        PushData(mesh.vertexBuffer, verticesData, verticesSize);

        const void* indicesData = mesh.submeshes[i].indices.data();
        const u32   indicesSize = mesh.submeshes[i].indices.size() * sizeof(u32);
        PushData(mesh.indexBuffer, indicesData, indicesSize);
    }

    UnmapBuffer(mesh.vertexBuffer);
    UnmapBuffer(mesh.indexBuffer);

    return modelIdx;
}

Vao CreateVAORaw(const Buffer&             indexBuffer,
                 const Buffer&             vertexBuffer,
                 u32                       vertexBufferOffset,
                 const VertexBufferLayout& bufferLayout,
                 const VertexShaderLayout& shaderLayout,
                 const Program&            shaderProgram)
{
    // Create a new vao for this submesh/program
    GLuint vaoHandle = 0;
    glGenVertexArrays(1, &vaoHandle);
    glBindVertexArray(vaoHandle);

    BindBuffer(vertexBuffer);
    BindBuffer(indexBuffer);

    // We have to link all vertex inputs attributes to attributes in the vertex buffer
    for (u32 i = 0; i < shaderLayout.attributes.size(); ++i)
    {
        bool attributeWasLinked = false;

        for (u32 j = 0; j < bufferLayout.attributes.size(); ++j)
        {
            if (shaderLayout.attributes[i].location == bufferLayout.attributes[j].location)
            {
                const u32 index  = bufferLayout.attributes[j].location;
                const u32 ncomp  = bufferLayout.attributes[j].componentCount;
                const u32 offset = bufferLayout.attributes[j].offset + vertexBufferOffset; // attribute offset + vertex offset
                const u32 stride = bufferLayout.stride;
                glVertexAttribPointer(index, ncomp, GL_FLOAT, GL_FALSE, stride, (void*)(u64)offset);
                glEnableVertexAttribArray(index);

                attributeWasLinked = true;
                break;
            }
        }

        ASSERT(attributeWasLinked, "The submesh should provide an attribute for each vertex input");
    }

    glBindVertexArray(0);

    // Store it in the list of vaos for this submesh
    Vao vao = { vaoHandle, shaderProgram.handle };
    return vao;
}

Vao CreateVAORaw(const Buffer& vertexBuffer,
                 u32           vertexBufferOffset,
                 const VertexBufferLayout& bufferLayout,
                 const VertexShaderLayout& shaderLayout,
                 const Program& shaderProgram)
{
    Buffer invalidIndexBuffer = {};
    return CreateVAORaw(invalidIndexBuffer, vertexBuffer, vertexBufferOffset, bufferLayout, shaderLayout, shaderProgram);
}

GLuint FindVAO(Mesh& mesh, u32 submeshIndex, const Program& program)
{
    Submesh& submesh = mesh.submeshes[submeshIndex];

    // Try finding a vao for this submesh/program
    for (u32 i = 0; i < (u32)submesh.vaos.size(); ++i)
        if (submesh.vaos[i].programHandle == program.handle)
            return submesh.vaos[i].handle;

    Vao vao = CreateVAORaw(mesh.indexBuffer, mesh.vertexBuffer, submesh.vertexOffset, submesh.vertexBufferLayout, program.vertexInputLayout, program);
    submesh.vaos.push_back(vao);

    return vao.handle;
}

RenderTarget CreateRenderTargetRaw(ivec2 displaySize, RenderTargetType type)
{
    GLenum internalFormat = GL_RGBA8;
    GLenum externalFormat = GL_RGBA;
    GLenum channelDataType = GL_UNSIGNED_BYTE;

    if (type == RenderTargetType_Depth)
    {
        internalFormat = GL_DEPTH_COMPONENT24;
        externalFormat = GL_DEPTH_COMPONENT;
        channelDataType = GL_FLOAT;
    }

    // Framebuffer
    GLuint textureHandle;
    glGenTextures(1, &textureHandle);
    glBindTexture(GL_TEXTURE_2D, textureHandle);
    glTexImage2D(GL_TEXTURE_2D, 0, internalFormat, displaySize.x, displaySize.y, 0, externalFormat, channelDataType, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    glBindTexture(GL_TEXTURE_2D, 0);

    RenderTarget renderTarget = {};
    renderTarget.size            = displaySize;
    renderTarget.handle          = textureHandle;
    renderTarget.type            = type;
    return renderTarget;
}

u32 CreateRenderTarget(App* app, RenderTargetType type)
{
    RenderTarget renderTarget = CreateRenderTargetRaw(app->displaySize, type);
    app->renderTargets.push_back(renderTarget);
    return app->renderTargets.size() -1 ;
}

void DestroyRenderTargetRaw(const RenderTarget& renderTarget)
{
    glDeleteTextures(1, &renderTarget.handle);
}

RenderPass CreateRenderPassRaw(App* app, u32 attachmentCount, Attachment* attachments)
{
    GLuint framebufferHandle;
    glGenFramebuffers(1, &framebufferHandle);
    glBindFramebuffer(GL_FRAMEBUFFER, framebufferHandle);

    u32    colorBufferCount = 0;
    GLuint colorBuffers[16] = {};

    for (u32 i = 0; i < attachmentCount; ++i)
    {
        GLenum attachmentPoint = attachments[i].attachmentPoint;
        u32    renderTargetIdx = attachments[i].renderTargetIdx;
        RenderTarget& renderTarget = app->renderTargets[ renderTargetIdx ];
        glFramebufferTexture(GL_FRAMEBUFFER, attachmentPoint, renderTarget.handle, 0);

        if (attachmentPoint < GL_COLOR_ATTACHMENT8) {
            colorBuffers[colorBufferCount++] = renderTarget.handle;
        }
    }

    GLenum framebufferStatus = glCheckFramebufferStatus(GL_FRAMEBUFFER);
    if (framebufferStatus != GL_FRAMEBUFFER_COMPLETE)
    {
        switch (framebufferStatus)
        {
            case GL_FRAMEBUFFER_UNDEFINED:                     ELOG("GL_FRAMEBUFFER_UNDEFINED"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:         ELOG("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: ELOG("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:        ELOG("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:        ELOG("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER"); break;
            case GL_FRAMEBUFFER_UNSUPPORTED:                   ELOG("GL_FRAMEBUFFER_UNSUPPORTED"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE:        ELOG("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE"); break;
            case GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS:      ELOG("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS"); break;
            default: ELOG("Unknown framebuffer status error");
        }
    }

    glDrawBuffers(colorBufferCount, colorBuffers);
    glBindFramebuffer(GL_FRAMEBUFFER, 0);

    RenderPass renderPass = { framebufferHandle };
    renderPass.attachmentCount = attachmentCount;
    memcpy(&renderPass.attachments, attachments, attachmentCount*sizeof(Attachment));
    return renderPass;
}

u32 CreateRenderPass(App* app, u32 attachmentCount, Attachment* attachments)
{
    RenderPass renderPass = CreateRenderPassRaw(app, attachmentCount, attachments);
    app->renderPasses.push_back(renderPass);
    return app->renderPasses.size() - 1U;
}

void DestroyRenderPassRaw(const RenderPass& renderPass)
{
    glDeleteFramebuffers(1, &renderPass.framebufferHandle);
}

void BeginRenderPass( App *app, u32 renderPassIdx )
{
    RenderPass& renderPass = app->renderPasses[renderPassIdx];
    glBindFramebuffer(GL_FRAMEBUFFER, renderPass.framebufferHandle);

    glClearColor(0.1f, 0.1f, 0.1f, 1.0f);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
}

void EndRenderPass( App *app )
{
    glBindFramebuffer(GL_FRAMEBUFFER, 0);
}

void AddModelEntity(App* app, u32 modelIndex, const mat4& worldMatrix)
{
    Entity entity = {};
    entity.type = EntityType_Model;
    entity.modelIndex = modelIndex;
    entity.worldMatrix = worldMatrix;
    app->entities.push_back(entity);
}

void AddMeshEntity(App* app, u32 meshIndex, u32 submeshIndex, const mat4& worldMatrix)
{
    Entity entity = {};
    entity.type = EntityType_Mesh;
    entity.meshIndex = meshIndex;
    entity.submeshIndex = submeshIndex;
    entity.worldMatrix = worldMatrix;
    app->entities.push_back(entity);
}

void AddDirectionalLight(App* app, const vec3& color, const vec3& direction)
{
    Light light = {};
    light.type = LightType_Directional;
    light.color = color;
    light.direction = direction;
    app->lights.push_back(light);
}

void AddPointLight(App* app, const vec3& color, const vec3& position)
{
    Light light = {};
    light.type = LightType_Point;
    light.color = color;
    light.position = position;
    app->lights.push_back(light);
}

mat4 TransformScale(const vec3& scaleFactors)
{
    mat4 transform = scale(scaleFactors);
    return transform;
}

mat4 TransformPositionScale(const vec3& pos, const vec3& scaleFactors)
{
    mat4 transform = translate(pos);
    transform = scale(transform, scaleFactors);
    return transform;
}

void BeginDebugDraw(App* app)
{
    app->debugDrawOpaqueLineCount = 0;
    MapBuffer(app->debugDrawOpaqueLineVertexBuffer, GL_WRITE_ONLY);
}

void DebugDrawLine(App* app, const vec3& p1, const vec3& p2, const vec3& color)
{
    struct DebugLineVertex { vec3 pos; vec3 col; };
    DebugLineVertex vertex1 = { p1, color };
    DebugLineVertex vertex2 = { p2, color };
    PushAlignedData(app->debugDrawOpaqueLineVertexBuffer, &vertex1, sizeof(DebugLineVertex), 1);
    PushAlignedData(app->debugDrawOpaqueLineVertexBuffer, &vertex2, sizeof(DebugLineVertex), 1);
    app->debugDrawOpaqueLineCount++;
}

void EndDebugDraw(App* app)
{
    UnmapBuffer(app->debugDrawOpaqueLineVertexBuffer);
}

void Init(App* app)
{
    // First object is considered null
    app->textures.push_back(Texture{});
    app->materials.push_back(Material{});
    app->meshes.push_back(Mesh{});
    app->models.push_back(Model{});
    app->programs.push_back(Program{});
    app->constantBuffers.push_back(Buffer{});
    app->renderTargets.push_back(RenderTarget{});
    app->renderPasses.push_back(RenderPass{});


    if (GLVersion.major > 4 || (GLVersion.major == 4 && GLVersion.minor >= 3))
    {
        glDebugMessageCallback(OnGlError, app);
    }

    sprintf(app->gpuName, "%s\n", glGetString(GL_RENDERER));
    sprintf(app->glVersionString,"%s\n", glGetString(GL_VERSION));
    u32 majorVersion = app->glVersionString[0] - '0';
    u32 minorVersion = app->glVersionString[2] - '0';
    app->glVersion   = GLVERSION(majorVersion, minorVersion);
    app->glslVersion = GLSLVERSION(majorVersion, minorVersion);

    // Embedded geometry
    app->meshes.push_back(Mesh{});
    Mesh& mesh = app->meshes.back();
    app->embeddedMeshIdx = (u32)app->meshes.size() - 1u;

    mesh.vertexBuffer = CreateStaticVertexBuffer(MB(1));
    mesh.indexBuffer = CreateStaticIndexBuffer(MB(1));
    
    MapBuffer(mesh.vertexBuffer, GL_WRITE_ONLY);
    MapBuffer(mesh.indexBuffer, GL_WRITE_ONLY);

    // Screen-filling triangle
    {
        struct VertexV3V2
        {
            vec3 pos;
            vec2 uv;
        };

        const VertexV3V2 vertices[] = {
            { vec3(-1.0, -1.0, 0.0), vec2(0.0, 0.0) }, // bottom-left vertex
            { vec3( 3.0, -1.0, 0.0), vec2(2.0, 0.0) }, // bottom-right vertex
            { vec3(-1.0,  3.0, 0.0), vec2(0.0, 2.0) }, // top-left vertex
        };

        const u32 indices[] = { 0, 1, 2 };

        app->blitSubmeshIdx = mesh.submeshes.size();
        mesh.submeshes.push_back(Submesh{});
        Submesh& submesh = mesh.submeshes.back();
        submesh.vertexOffset = mesh.vertexBuffer.head;
        submesh.indexOffset = mesh.indexBuffer.head;
        submesh.vertexBufferLayout.stride = sizeof(VertexV3V2);
        submesh.vertexBufferLayout.attributes.push_back(VertexBufferAttribute{0, 3, 0});
        submesh.vertexBufferLayout.attributes.push_back(VertexBufferAttribute{2, 2, sizeof(vec3)});

        PushData(mesh.vertexBuffer, vertices, sizeof(vertices));
        PushData(mesh.indexBuffer, indices, sizeof(indices));
    }

    // Floor plane
    {
        struct VertexV3V3V2
        {
            vec3 pos;
            vec3 nor;
            vec2 uv;
        };

        const VertexV3V3V2 vertices[] = {
            { vec3(-1.0, 0.0,  1.0), vec3(0.0, 1.0, 0.0), vec2(0.0, 0.0) }, // bottom-left vertex
            { vec3( 1.0, 0.0,  1.0), vec3(0.0, 1.0, 0.0), vec2(1.0, 0.0) }, // bottom-right vertex
            { vec3( 1.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), vec2(1.0, 1.0) }, // top-right vertex
            { vec3(-1.0, 0.0, -1.0), vec3(0.0, 1.0, 0.0), vec2(0.0, 1.0) }, // top-left vertex
        };

        const u32 indices[] = {
            0, 1, 2,
            0, 2, 3
        };

        app->floorSubmeshIdx = mesh.submeshes.size();
        mesh.submeshes.push_back(Submesh{});
        Submesh& submesh = mesh.submeshes.back();
        submesh.vertexOffset = mesh.vertexBuffer.head;
        submesh.indexOffset = mesh.indexBuffer.head;
        submesh.vertexBufferLayout.stride = sizeof(VertexV3V3V2);
        submesh.vertexBufferLayout.attributes.push_back(VertexBufferAttribute{0, 3, 0});
        submesh.vertexBufferLayout.attributes.push_back(VertexBufferAttribute{1, 3, sizeof(vec3)});
        submesh.vertexBufferLayout.attributes.push_back(VertexBufferAttribute{2, 2, 2*sizeof(vec3)});

        PushData(mesh.vertexBuffer, vertices, sizeof(vertices));
        PushData(mesh.indexBuffer, indices, sizeof(indices));
    }

    UnmapBuffer(mesh.vertexBuffer);
    UnmapBuffer(mesh.indexBuffer);

    // Sprite pipeline
    app->texturedGeometryProgramIdx = LoadProgram(app, "shaders.glsl", "TEXTURED_GEOMETRY");

    Program& texturedGeometryProgram = app->programs[app->texturedGeometryProgramIdx];
    app->programUniformTexture = glGetUniformLocation(texturedGeometryProgram.handle, "uTexture");

    app->diceTexIdx = LoadTexture2D(app, "dice.png");
    app->whiteTexIdx = LoadTexture2D(app, "color_white.png");
    app->blackTexIdx = LoadTexture2D(app, "color_black.png");
    app->normalTexIdx = LoadTexture2D(app, "color_normal.png");
    app->magentaTexIdx = LoadTexture2D(app, "color_magenta.png");

    Material defaultMaterial = {};
    defaultMaterial.name = "defaultMaterial";
    defaultMaterial.albedo = vec3(1.0);
    defaultMaterial.emissive = vec3(0.0);
    defaultMaterial.smoothness = 0.0;
    defaultMaterial.albedoTextureIdx = app->whiteTexIdx;
    defaultMaterial.emissiveTextureIdx = app->blackTexIdx;
    defaultMaterial.specularTextureIdx = app->blackTexIdx;
    defaultMaterial.normalsTextureIdx = app->normalTexIdx;
    defaultMaterial.bumpTextureIdx = app->blackTexIdx;
    app->defaultMaterialIdx = app->materials.size();
    app->materials.push_back(defaultMaterial);

    // Mesh pipeline
    app->patrickModelIndex = LoadModel(app, "Patrick/Patrick.obj");

    app->meshProgramIdx = LoadProgram(app, "shaders.glsl", "SHOW_MESH");

    app->texturedMeshProgramIdx = LoadProgram(app, "shaders.glsl", "SHOW_TEXTURED_MESH");
    Program& texturedMeshProgram = app->programs[app->texturedMeshProgramIdx];
    app->texturedMeshProgram_uTexture = glGetUniformLocation(texturedMeshProgram.handle, "uTexture");

    app->transformedTexturedMeshProgramIdx = LoadProgram(app, "shaders.glsl", "SHOW_TRANSFORMED_TEXTURED_MESH");
    Program& transformedTexturedMeshProgram = app->programs[app->transformedTexturedMeshProgramIdx];
    app->texturedMeshProgram_uTexture = glGetUniformLocation(transformedTexturedMeshProgram.handle, "uTexture");

    glGetIntegerv(GL_MAX_UNIFORM_BLOCK_SIZE, &app->uniformBufferMaxSize);
    glGetIntegerv(GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT, &app->uniformBufferAlignment);

    app->uniformBlockSize_GlobalParams = KB(1); // TODO: Get the size from the shader?
    app->uniformBlockSize_LocalParams  = KB(1); // TODO: Get the size from the shader?

    app->debugDrawOpaqueProgramIdx = LoadProgram(app, "shaders.glsl", "DEBUG_DRAW_OPAQUE");
    app->debugDrawOpaqueLineVertexBuffer = CreateDynamicVertexBuffer(KB(125));
    app->debugDrawOpaqueLineCount = 0;
    u32 debugDrawOpaqueLineOffset = 0;
    VertexBufferLayout debugDrawOpaqueLineVertexBufferLayout = {};
    debugDrawOpaqueLineVertexBufferLayout.attributes.push_back(VertexBufferAttribute{ 0, 3, 0 });
    debugDrawOpaqueLineVertexBufferLayout.attributes.push_back(VertexBufferAttribute{ 5, 3, sizeof(vec3) });
    debugDrawOpaqueLineVertexBufferLayout.stride = 2 * sizeof(vec3);
    Program debugDrawOpaqueLineProgram = app->programs[app->debugDrawOpaqueProgramIdx];
    app->debugDrawOpaqueLineVao = CreateVAORaw(app->debugDrawOpaqueLineVertexBuffer,
                                           debugDrawOpaqueLineOffset,
                                           debugDrawOpaqueLineVertexBufferLayout,
                                           debugDrawOpaqueLineProgram.vertexInputLayout,
                                           debugDrawOpaqueLineProgram);

    // Camera
    Camera& camera = app->mainCamera;
    camera.yaw = 0.0f;
    camera.pitch = -0.3f;
    camera.position = vec3(0.0, 2.0, 6.0);

    
    app->colorRenderTargetIdx = CreateRenderTarget(app, RenderTargetType_Color);
    app->depthRenderTargetIdx = CreateRenderTarget(app, RenderTargetType_Depth);
    Attachment attachments[] = {
        {GL_COLOR_ATTACHMENT0, app->colorRenderTargetIdx},
        {GL_DEPTH_ATTACHMENT,  app->depthRenderTargetIdx},
    };
    app->forwardRenderPassIdx = CreateRenderPass(app, ARRAY_COUNT(attachments), attachments);

    // Entities
    AddMeshEntity(app, app->embeddedMeshIdx, app->floorSubmeshIdx, TransformScale(vec3(100.0f)));
    const u32 ENTITY_MULTIPLIER = 10;
    const f32 ENTITY_SEPARATION = 3.0f;
    for ( u32 i = 0; i < ENTITY_MULTIPLIER; ++i )
    {
        for ( u32 j = 0; j < ENTITY_MULTIPLIER; ++j )
        {
            f32 x = ENTITY_SEPARATION * (f32)i - 0.5f * ENTITY_MULTIPLIER * ENTITY_SEPARATION;
            f32 z = ENTITY_SEPARATION * (f32)j - 0.5f * ENTITY_MULTIPLIER * ENTITY_SEPARATION;
            AddModelEntity( app, app->patrickModelIndex, TransformPositionScale( vec3( x, 1.5f, z ), vec3( 0.45f ) ) );
        }
    }
    AddDirectionalLight( app, vec3( 0.8, 0.8, 0.8 ), normalize( vec3( 1.0, 1.0, 1.0 ) ) );
    AddPointLight(app, vec3(2.0, 1.5, 0.5), vec3( 0.0, 0.5, -4.0));
    AddPointLight(app, vec3(2.0, 1.5, 0.5), vec3( 4.0, 0.5,  3.0));
    AddPointLight(app, vec3(2.0, 1.5, 0.5), vec3(-4.0, 0.5,  3.0));

    app->mode = Mode_ForwardRender;
}

void Gui(App* app)
{
    ImGui::Begin("Info");
    ImGui::Text("GPU Name: %s", app->gpuName);
    ImGui::Text("OGL Version: %s", app->glVersionString);
    ImGui::Text("FPS: %f", 1.0f/app->deltaTime);

    ImGui::Separator();
    
    ImGui::Text("Camera");
    float yawPitch[3] = {360.0f * app->mainCamera.yaw / TAU, 360.0f * app->mainCamera.pitch / TAU};
    ImGui::InputFloat3("Yaw/Pitch/Roll", yawPitch, "%.3f", ImGuiInputTextFlags_ReadOnly);
    ImGui::InputFloat3("Position", value_ptr(app->mainCamera.position), "%.3f", ImGuiInputTextFlags_ReadOnly);
    
    ImGui::Separator();

    if (ImGui::Button("Take snapshot"))
    {
        app->takeSnapshot = true;
    }
    ImGui::End();
}

void Resize(App* app)
{
    // Resize render targets
    for (u32 i = 0; i < app->renderTargets.size(); ++i)
    {
        RenderTarget& renderTarget = app->renderTargets[i];
        DestroyRenderTargetRaw(renderTarget);
        renderTarget = CreateRenderTargetRaw(app->displaySize, renderTarget.type);
    }

    // Recreate render passes
    for (u32 i = 0; i < app->renderPasses.size(); ++i)
    {
        RenderPass& renderPass = app->renderPasses[i];
        DestroyRenderPassRaw(renderPass);
        renderPass = CreateRenderPassRaw(app, renderPass.attachmentCount, renderPass.attachments);
    }
}

void Update(App* app)
{
    if (app->input.keys[K_M] == BUTTON_PRESS)
        app->mode = (Mode)((app->mode + 1) % Mode_Count);

    if (app->input.keys[K_T] == BUTTON_PRESS)
        app->textureIndexShown++;

    if (app->input.mouseButtons[LEFT] == BUTTON_PRESS)
        ILOG("Mouse button left pressed");

    if (app->input.mouseButtons[LEFT] == BUTTON_RELEASE)
        ILOG("Mouse button left released");

    for (u64 i = 0; i < app->programs.size(); ++i)
    {
        Program& program = app->programs[i];
        u64 currentTimestamp = GetFileLastWriteTimestamp(program.filepath.c_str());
        if (currentTimestamp > program.lastWriteTimestamp)
        {
            glDeleteProgram(program.handle);
            String programSource = ReadTextFile(program.filepath.c_str());
            const char* programName = program.programName.c_str();
            program.handle = CreateProgramFromSource(programSource, app->glslVersion, programName);
            program.vertexInputLayout = ExtractVertexShaderLayoutFromProgram(program.handle);
            program.lastWriteTimestamp = currentTimestamp;
        }
    }

    // Update camera
    Camera& camera = app->mainCamera;

    const float rotationSpeed = 0.1f * PI;
    if (app->input.mouseButtons[RIGHT] == BUTTON_PRESSED)
    {
        camera.yaw += app->input.mouseDelta.x * rotationSpeed * app->deltaTime;
        camera.pitch -= app->input.mouseDelta.y * rotationSpeed * app->deltaTime;
    }
    camera.yaw = mod(camera.yaw, TAU);
    camera.pitch = clamp(camera.pitch, -PI/2.1f, PI/2.1f);
    camera.forward = vec3(cosf(camera.pitch)*sinf(camera.yaw),
                               sinf(camera.pitch),
                               -cosf(camera.pitch)*cosf(camera.yaw));
    camera.right = vec3(cosf(camera.yaw), 0.0f, sinf(camera.yaw));
    vec3 upVector = vec3(0.0f, 1.0f, 0.0f);

    vec3 newDirection = vec3(0.0);
    if (app->input.keys[K_W] == BUTTON_PRESSED) { newDirection += camera.forward; }
    if (app->input.keys[K_S] == BUTTON_PRESSED) { newDirection -= camera.forward; }
    if (app->input.keys[K_D] == BUTTON_PRESSED) { newDirection += camera.right;   }
    if (app->input.keys[K_A] == BUTTON_PRESSED) { newDirection -= camera.right;   }

    const float newdirMagnitude = length(newDirection);
    newDirection = (newdirMagnitude > 0.0f) ? newDirection / newdirMagnitude : vec3(0.0f);

    float speedMagnitude = length(camera.speed);
    vec3 speedDirection = (speedMagnitude > 0.0f) ? camera.speed / speedMagnitude : vec3(0.0f);

    const float MAX_SPEED = 100.0f;
    if (newdirMagnitude > 0.0f) {
        speedDirection = 0.5f * (speedDirection + newDirection);
        speedMagnitude = min(speedMagnitude + 1.0f, MAX_SPEED);
    } else {
        speedMagnitude *= 0.8f;
        if (speedMagnitude < 0.01f)
            speedMagnitude = 0.0f;
    }

    camera.speed = speedMagnitude * speedDirection;

    camera.position += camera.speed * app->deltaTime;

    float aspectRatio = (float)app->displaySize.x/(float)app->displaySize.y;
    mat4 projection = perspective(radians(60.0f), aspectRatio, 0.1f, 1000.0f);
    mat4 view       = lookAt(camera.position, camera.position + camera.forward, upVector);

    // Upload uniforms to buffer

    BeginConstantBufferRecording( app );

    Buffer& constantBuffer = GetMappedConstantBufferForRange( app, app->uniformBlockSize_GlobalParams );

    // -- Global params
    app->globalParamsBufferIdx = app->currentConstantBufferIdx;
    app->globalParamsOffset = constantBuffer.head;

    mat4 viewProjection = projection * view;
    PushMat4(constantBuffer, viewProjection);
    PushVec3(constantBuffer, camera.position);

    PushUInt(constantBuffer, app->lights.size());

    for (u32 i = 0; i < app->lights.size(); ++i)
    {
        AlignHead(constantBuffer, sizeof(vec4));

        Light& light = app->lights[i];
        PushUInt(constantBuffer, light.type);
        PushVec3(constantBuffer, light.color);
        PushVec3(constantBuffer, light.direction);
        PushVec3(constantBuffer, light.position);
    }

    app->globalParamsSize = constantBuffer.head - app->globalParamsOffset;

    // -- Local params
    for (u32 i = 0; i < app->entities.size(); ++i)
    {
        Buffer& constantBuffer = GetMappedConstantBufferForRange( app, app->uniformBlockSize_LocalParams );

        Entity& entity = app->entities[i];
        mat4    world  = entity.worldMatrix;
        mat4    worldViewProjection = projection * view * world;

        entity.localParamsBufferIdx = app->currentConstantBufferIdx;
        entity.localParamsOffset = constantBuffer.head;
        PushMat4(constantBuffer, world);
        PushMat4(constantBuffer, worldViewProjection);
        entity.localParamsSize = constantBuffer.head - entity.localParamsOffset;
    }

    EndConstantBufferRecording( app );

#if 0
    BeginDebugDraw(app);

    for (u32 i = 0; i < app->entities.size(); ++i)
    {
        Entity& entity = app->entities[i];
        DebugDrawLine(app, entity.worldMatrix[3], vec3(entity.worldMatrix[3]) + vec3(0.0, 5.0, 0.0), vec3(1.0, 0.0, 0.0));
    }

    EndDebugDraw(app);
#endif
}

void BlitTexture(App* app, GLuint textureHandle)
{
    GL_DEBUG_GROUP("Blit");

    glViewport(0, 0, app->displaySize.x, app->displaySize.y);

    Program& programTexturedGeometry = app->programs[app->texturedGeometryProgramIdx];
    glUseProgram(programTexturedGeometry.handle);

    Mesh& mesh = app->meshes[app->embeddedMeshIdx];
    GLuint vao = FindVAO(mesh, app->blitSubmeshIdx, programTexturedGeometry);
    glBindVertexArray(vao);

    glDisable(GL_DEPTH_TEST);
    glEnable(GL_BLEND);
    glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glUniform1i(app->programUniformTexture, 0);
    glActiveTexture(GL_TEXTURE0);
    glBindTexture(GL_TEXTURE_2D, textureHandle);

    glDrawElements(GL_TRIANGLES, 3, GL_UNSIGNED_INT, 0);

    glBindVertexArray(0);
    glUseProgram(0);
}

void Render(App* app)
{
    switch (app->mode)
    {
        case Mode_BlitTexture:
            {
                GLuint textureHandle = app->textures[app->textureIndexShown % app->textures.size()].handle;
                BlitTexture(app, textureHandle);
            }
            break;

        case Mode_ModelNormals:
            {
                //
                // Render pass: Draw mesh
                //

                GL_DEBUG_GROUP("Model normals");

                BeginRenderPass(app, app->forwardRenderPassIdx);

                glViewport(0, 0, app->displaySize.x, app->displaySize.y);
                glEnable(GL_DEPTH_TEST);

                Program& meshProgram = app->programs[app->meshProgramIdx];
                glUseProgram(meshProgram.handle);

                Model& model = app->models[app->patrickModelIndex];
                Mesh& mesh = app->meshes[model.meshIdx];
                for (u32 i = 0; i < mesh.submeshes.size(); ++i)
                {
                    GLuint vao = FindVAO(mesh, i, meshProgram);
                    glBindVertexArray(vao);

                    const Submesh& submesh = mesh.submeshes[i];
                    glDrawElements(GL_TRIANGLES, submesh.indices.size(), GL_UNSIGNED_INT, (void*)(u64)submesh.indexOffset);
                }

                glBindVertexArray(0);

                glUseProgram(0);

                EndRenderPass(app);
            }
            break;

        case Mode_ModelAlbedo:
            {
                //
                // Render pass: Draw mesh
                //

                GL_DEBUG_GROUP("Model albedo");

                BeginRenderPass(app, app->forwardRenderPassIdx);

                glViewport(0, 0, app->displaySize.x, app->displaySize.y);
                glEnable(GL_DEPTH_TEST);

                Program& texturedMeshProgram = app->programs[app->texturedMeshProgramIdx];
                glUseProgram(texturedMeshProgram.handle);

                Model& model = app->models[app->patrickModelIndex];
                Mesh& mesh = app->meshes[model.meshIdx];
                for (u32 i = 0; i < mesh.submeshes.size(); ++i)
                {
                    GLuint vao = FindVAO(mesh, i, texturedMeshProgram);
                    glBindVertexArray(vao);

                    Submesh& submesh = mesh.submeshes[i];
                    u32 submeshMaterialIdx = model.materialIdx[i];
                    Material& submeshMaterial = app->materials[submeshMaterialIdx];
                    glActiveTexture(GL_TEXTURE0);
                    glBindTexture(GL_TEXTURE_2D, app->textures[submeshMaterial.albedoTextureIdx].handle);
                    glUniform1i(app->texturedMeshProgram_uTexture, 0);

                    glDrawElements(GL_TRIANGLES, submesh.indices.size(), GL_UNSIGNED_INT, (void*)(u64)submesh.indexOffset);
                }

                glBindVertexArray(0);

                glUseProgram(0);

                EndRenderPass(app);
            }
            break;


        case Mode_ForwardRender:
            {
                GL_DEBUG_GROUP("Forward render");

                BeginRenderPass(app, app->forwardRenderPassIdx);

                glViewport(0, 0, app->displaySize.x, app->displaySize.y);
                glEnable(GL_DEPTH_TEST);

                {
                    GL_DEBUG_GROUP("Shaded models");

                    const Program& program = app->programs[app->transformedTexturedMeshProgramIdx];
                    glUseProgram(program.handle);

                    if (app->glVersion < GLVERSION(4, 2))
                    {
                        const GLuint globalParamsIndex = glGetUniformBlockIndex(program.handle, "GlobalParams");
                        const GLuint localParamsIndex = glGetUniformBlockIndex(program.handle, "LocalParams");
                        glUniformBlockBinding(program.handle, globalParamsIndex, BINDING(0));
                        glUniformBlockBinding(program.handle, localParamsIndex, BINDING(1));
                    }

                    glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(0), app->constantBuffers[app->globalParamsBufferIdx].handle, app->globalParamsOffset, app->globalParamsSize);

                    for (u32 i = 0; i < app->entities.size(); ++i)
                    {
                        const Entity& entity = app->entities[i];

                        // If we store all information in a struct like this before
                        // the code below will simplify a lot.
                        //struct ForwardRenderPrimitive
                        //{
                        //    GLuint vaoId;
                        //    u32    indexCount;
                        //    u32    indexOffset;
                        //    GLuint bufferId;
                        //    GLuint blockOffset;
                        //    GLuint blockOffset;
                        //    GLuint texId;
                        //};

                        if (entity.type == EntityType_Model)
                        {
                            GLuint bufferHandle = app->constantBuffers[entity.localParamsBufferIdx].handle;
                            glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(1), bufferHandle, entity.localParamsOffset, entity.localParamsSize);

                            Model& model = app->models[entity.modelIndex];
                            Mesh& mesh = app->meshes[model.meshIdx];

                            for (u32 i = 0; i < mesh.submeshes.size(); ++i)
                            {
                                GLuint vao = FindVAO(mesh, i, program);
                                glBindVertexArray(vao);

                                Submesh& submesh = mesh.submeshes[i];
                                u32 submeshMaterialIdx = model.materialIdx[i];
                                Material& submeshMaterial = app->materials[submeshMaterialIdx];
                                glActiveTexture(GL_TEXTURE0);
                                glBindTexture(GL_TEXTURE_2D, app->textures[submeshMaterial.albedoTextureIdx].handle);
                                glUniform1i(app->texturedMeshProgram_uTexture, 0);

                                glDrawElements(GL_TRIANGLES, submesh.indices.size(), GL_UNSIGNED_INT, (void*)(u64)submesh.indexOffset);
                            }
                        }
                        else if (entity.type == EntityType_Mesh)
                        {
                            GLuint bufferHandle = app->constantBuffers[entity.localParamsBufferIdx].handle;
                            glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(1), bufferHandle, entity.localParamsOffset, entity.localParamsSize);

                            Mesh& mesh = app->meshes[entity.meshIndex];

                            GLuint vao = FindVAO(mesh, entity.submeshIndex, program);
                            glBindVertexArray(vao);

                            Material& defaultMaterial = app->materials[app->defaultMaterialIdx];
                            glActiveTexture(GL_TEXTURE0);
                            glBindTexture(GL_TEXTURE_2D, app->textures[defaultMaterial.albedoTextureIdx].handle);
                            glUniform1i(app->texturedMeshProgram_uTexture, 0);

                            Submesh& submesh = mesh.submeshes[entity.submeshIndex];
                            glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, (void*)(u64)submesh.indexOffset);
                        }
                    }
                }
#if 1
                {
                    GL_DEBUG_GROUP("Debug draw");

                    const Program& program = app->programs[app->debugDrawOpaqueProgramIdx];
                    glUseProgram(program.handle);

                    glBindBufferRange(GL_UNIFORM_BUFFER, BINDING(0), app->constantBuffers[app->globalParamsBufferIdx].handle, app->globalParamsOffset, app->globalParamsSize);

                    glBindVertexArray(app->debugDrawOpaqueLineVao.handle);
                    
                    glDrawArrays(GL_LINES, 0, app->debugDrawOpaqueLineCount * 2);
                }
#endif

                glBindVertexArray(0);

                glUseProgram(0);

                EndRenderPass(app);
            }
            {

            }
            {
                RenderTarget& renderTarget = app->renderTargets[app->colorRenderTargetIdx];
                BlitTexture(app, renderTarget.handle);
            }
            break;

        default:;
    }

    //
    // Read pixels
    //

    if (app->takeSnapshot)
    {
        glFinish();

        const u32 width = app->displaySize.x;
        const u32 height = app->displaySize.y;
        u8* outPixels = new u8[width*height*3];
        glReadPixels(0, 0, width, height, GL_RGB, GL_UNSIGNED_BYTE, outPixels);
        stbi_write_png("snapshot.png", width, height, 3, (const void*)outPixels, width*3);
        delete[] outPixels;
    }
}

